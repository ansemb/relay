==================================== INPUT ====================================
# expected-to-throw
query queryWithAndWithoutModuleDirective_NameRendererQuery($id: ID!) {
  node(id: $id) {
    ...queryWithAndWithoutModuleDirective_NameRendererFragment
  }
}

fragment queryWithAndWithoutModuleDirective_NameRendererFragment on User {
  id
  nameRenderer {
    ...queryWithAndWithoutModuleDirective_MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
  without_module: nameRenderer {
    ...queryWithAndWithoutModuleDirective_MarkdownUserNameRenderer_name
  }
}

fragment queryWithAndWithoutModuleDirective_MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}
==================================== ERROR ====================================
✖︎ Expected `@alias` directive. `queryWithAndWithoutModuleDirective_MarkdownUserNameRenderer_name` is defined on `MarkdownUserNameRenderer` which might not match this selection type of `UserNameRenderer`. Add `@alias` to this spread to expose the fragment reference as a nullable property.

  query-with-and-without-module-directive.graphql:15:8
   14 │   without_module: nameRenderer {
   15 │     ...queryWithAndWithoutModuleDirective_MarkdownUserNameRenderer_name
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   16 │   }


✖︎ Expected `@alias` directive. `queryWithAndWithoutModuleDirective_NameRendererFragment` is defined on `User` which might not match this selection type of `Node`. Add `@alias` to this spread to expose the fragment reference as a nullable property.

  query-with-and-without-module-directive.graphql:4:8
    3 │   node(id: $id) {
    4 │     ...queryWithAndWithoutModuleDirective_NameRendererFragment
      │        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 │   }
